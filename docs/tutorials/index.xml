<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Vector.js</title>
    <link>https://vectorjs.org/tutorials/</link>
    <description>Recent content in Tutorials on Vector.js</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 05 Feb 2019 12:03:45 -0700</lastBuildDate><atom:link href="https://vectorjs.org/tutorials/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started</title>
      <link>https://vectorjs.org/tutorials/getting-started/</link>
      <pubDate>Tue, 05 Feb 2019 12:03:45 -0700</pubDate>
      
      <guid>https://vectorjs.org/tutorials/getting-started/</guid>
      <description>To use this library, download the getting-started.tgztar ball and follow the instructions below. The tar ball contains a folder with an index.html file and script.js file. The HTML file links the library&amp;rsquo;s style sheet, includes the script file which creates the interactive image, and has an element with an unique id that the interactive is rendered within.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34; dir=&amp;#34;ltr&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Getting Started&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://vectorjs.org/library.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;my-interactive&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;module&amp;#34; src=&amp;#34;script.</description>
    </item>
    
    <item>
      <title>Graphs Tutorial</title>
      <link>https://vectorjs.org/tutorials/graphs/</link>
      <pubDate>Tue, 05 Feb 2019 12:03:45 -0700</pubDate>
      
      <guid>https://vectorjs.org/tutorials/graphs/</guid>
      <description>The graph module is used to visualize simple graphs in the form of a node-link diagram. Both directed and undirected graphs are supported. The Reingold-Tilford “Tidy” layout for drawing trees is also supported.
To create a graph, first create an interactive object (link). Then create a graph object as shown below. When doing so, you will specify whether or not it is a directed edge.
let graph = interactive.graph({directed:true}); When creating a node, you can specify position, label, x radius and y radius of the node, which is shown as an ellipse.</description>
    </item>
    
    <item>
      <title>Map Module</title>
      <link>https://vectorjs.org/tutorials/maps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vectorjs.org/tutorials/maps/</guid>
      <description>The Map Module is used to plot geographic data in SVG format. Our library supports GeoJsonwhich is the most popular data standard for representing geographical data. GeoJson can be downloaded from a variety of places off of the internet, or it could be retrieved with a javascript promise. In order to make our examples work on our website, we host a small amount of GeoJson at GeoJson for every country and United States.</description>
    </item>
    
    <item>
      <title>Plot Tutorial</title>
      <link>https://vectorjs.org/tutorials/plots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vectorjs.org/tutorials/plots/</guid>
      <description>let scale = 300/Math.PI; let plot = interactive.plot(600, 300, Math.cos, { originX: 0, originY: 150, scaleX: scale, scaleY: scale, controls: false, /* experimental */ displayPoint: false, /* experimental */ zoomable: false /* experimental */ });  import main from &#34;\/examples\/elements\/plot-element.js&#34;; main(&#34;426b4efc09a17eb168e5c076b6736609&#34;);  Visualize Multiple Functions let scale = 300/Math.PI; let secant = (x) =&amp;gt; { return 1/Math.cos(x) }; let plot = interactive.plot(600, 600, secant, { originX: 0, originY: 300, scaleX: scale, scaleY: scale, zoomable: false, controls: false }); plot.</description>
    </item>
    
    <item>
      <title>Population Map</title>
      <link>https://vectorjs.org/tutorials/population-map-of-united-states/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vectorjs.org/tutorials/population-map-of-united-states/</guid>
      <description>In this tutorial we will create the interactive map of the United States shown above. Each state is colored by its population density (population density is a ratio of total population to size of an area). You can also hover over states with your mouse, to see the state name and it&amp;rsquo;s population density.
The first step in using our mapping module is always to pull in your GeoJson data. For more information on this step, see our API or the Map Module tutorial.</description>
    </item>
    
    <item>
      <title>Control With Position</title>
      <link>https://vectorjs.org/tutorials/control-with-position/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vectorjs.org/tutorials/control-with-position/</guid>
      <description>This tutorial demonstrates how to add a text label to a control point and then make the label follow and display the position of the point using reactive programming syntax. We assume you have gone through the getting started tutorial to get to the starting point.
Starting point The starting point is an interactive with a control point that can be dragged around.
1import Interactive from &amp;#39;/interactive.js&amp;#39;; 2 3// Initialize the interactive 4let interactive = new Interactive(&amp;#34;step-0&amp;#34;); 5interactive.</description>
    </item>
    
  </channel>
</rss>
